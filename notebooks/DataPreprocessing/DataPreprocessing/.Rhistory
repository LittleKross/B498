library(boot)
set.seed(17)
cv.error.10=numeric(10)
for (i in 1:10){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
cv.error.10
ggplot(mapping=aes(x=1:10,y=cv.error.10)) + geom_point()
# k-Fold Cross-Validation
library(ISLR)
library(boot)
library(ggplot2)
set.seed(17)
cv.error.10=numeric(10)
for (i in 1:10){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
cv.error.10
ggplot(mapping=aes(x=1:10,y=cv.error.10)) + geom_point()
library(boot)
#     Estimating the accuracy of a statistic of interest
alpha.fn=function(data,index){ #calc statistic
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
# Create a bootstrap dataset and compute estimate of alpha
alpha.fn(Portfolio,sample(100,100,replace=T))
# Do this 1000 times and compute resulting standard deviation
b <- boot(Portfolio,alpha.fn,R=1000)
names(b)
b
set.seed(1234)
data <- as.data.frame(sapply(1:50,
function(i){c(runif(20,10,25),rnorm(20,20,5),rpois(20,21))}))
clus <- rep(c("unif","norm","pois"),c(20,20,20))
source('~/Languages/R code/plot-distributions.R')
source('~/Languages/R code/net_vis.R')
source('~/Languages/R code/misc.R')
list.files(".")
list.dirs(getwd())
getwd()
a = list(1,list(1,2,3),4,c(5,6))
a[2]
a[1]
a[3]
a[4]
a[[4]]
a[[4]][1]
help('[')
help(lm)
help([)
df <- data.frame(a = 1:2, b = 1:2)
df
df[1]
a = df[1]
class(a)
str(a)
b <- list(a = list(b = list(c = list(d = 1))))
b
b[[c("a", "b", "c", "d")]]
head(mtcars)
mtcars[[1]]
mtcars[1]
mtcars$mpg
x=1:4
NA_real_
NA_character_
typeof(NA_real_)
y = list(a=1)
y[["b"]]=2
str(y)
y[c]=3
y["c"]=3
y
str(y)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
a = lookup[x]
typeof(a)
class(a)
is.vector(a)
attributes(a)
b=unname(a)
is.vector(b)
attributes(b)
a == b
a
b
df <- data.frame(x = rep(1:3, each = 2), y = 6:1, z = letters[1:6])
df
set.seed(10)
df[sample(nrow(df)), ]
df[sample(nrow(df), 3), ]
df[sample(nrow(df), 6, rep = T), ]
x <- sample(10) < 4
x
sample(10)
sample(10)
sample(10)
x
which(x)
as.integer(x)
x+x
replicate
replicate(10, sample(1:10, 1, replace = FALSE))
5
replicate(10, sample(1:10, 5, replace = FALSE))
x = replicate(10, sample(1:10, 5, replace = FALSE))
class(x)
head(cars)
as.formula(dist~speed)
as.formula(dist~speed) -> a
lm(a,data=cars)
m=3
foo = function() m
foo()
m=2
foo()
foo= function(x) {function(a) {x+a}}
foo= function() {function(a) {x+a}}
x=1
f1 = foo()
f1(2)
x=2
f2(foo())
f2 = foo()
f2(2)
f1(2)
n=23
q <- 1 - (0:(n - 1))/365
q
0:22
365/(365^2)
n=2
q <- 1 - (0:(n - 1))/365
q
prod(q)
365*364/(365^2)
q = (365-0:n)/365
q
```{r}
p <- numeric(50)
for (n in 1:50) {
q <- (365 - (0:n))/365
p[n] <- prod(q)
}
q
p
plot(p)
n=1
q <- (365 - (0:n))/365
q
p <- numeric(50)
for (n in 1:50) {
q <- (365 - (n:0))/365
p[n] <- prod(q)
}
q
p
plot(p)
n=2
q <- (365 - (n:0))/365
q
p <- numeric(50)
for (n in 1:50) {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)
}
q
p
plot(p)
e
1/2.7181818
# Matching problem. Shuffle a deck of 52 cards labeled 1 through n,
# and count how many times it happens that the jth card in the deck
# has label j.
# Then the probability of there being no match is approximately 1/e.
m <- 52
n <- 10^4
r <- replicate(n,sum(sample(m)==(1:m)))
n/sum(r==0)
# Matching problem. Shuffle a deck of 52 cards labeled 1 through n,
# and count how many times it happens that the jth card in the deck
# has label j.
# Then the probability of there being no match is approximately 1/e.
m <- 52
n <- 10^4
r <- replicate(n,sum(sample(m)==(1:m)))
sum(r==0)/n
sample(52)
Sys.info()
help()
help()
help()
Sys.getenv()
Sys.getenv()
Sys.getenv('LD_LIBRARY_PATH')
?summary.aov
x = seq(6:10,1:5)
x = rep(6:10,1:5)
x
rle(x)
y=rle(x)
y[[1]]
y[[2]]
library(help='datasets')
help("str.dendrogram")
m = lm(dist~speed,data=cars)
View(m)
View(oj)
View(m)
m[["coefficients"]]
l <- list(a = 1:10, b = 11:20)
l
x = lapply(x,mean)
x
x$a
l
l$a
lapply(l,mean)
x = lapply(l,mean)
x$a
x
y = sapply(l,mean)
y$a
y
y['a']
View(x)
x[["b"]]
y[1]
y[[1]]
typeof(y[1])
typeof(y[[1]])
y[1]==y[[1]]
z=y[[1]]
w=y[1]
attr(y)
attributes(y)
fivenum(l)
vapply(l,fivenum)
Sys.which(R)
Sys.which('R')
Sys.which('RStudio')
Sys.which('rstudio')
Sys.which('Rstidio')
source('~/Courses/Programming-2017/Materials/lcg.R')
rm(list=ls())
# Parameters are ANSI C Implementation
lcg <- function(n=10, seed = as.numeric(Sys.time()) * 1000, m = 2 ** 32, a = 1103515245, c = 12345) {
accum = vector(length = n)
X = seed
for (i in 1:n) {
X = (a * X + c) %% m
accum[i] = X / m  #Normalize bewtween [0,1)
}
return(accum)
}
lcg()
s = as.numeric(Sys.time()) * 1000
lcg(seed=s)
x = lcg(n=1000,m=2048,a=1229,c=1)
y = lcg(n=1000,m=2048,a=1229,c=1)
plot(x,y,pch=20)
x = lcg(n=1000,m=2048,a=1229,c=1)
y = lcg(n=1000,m=2048,a=1229,c=1)
plot(x,y,pch=20)
Sys.info()
startDynamicHelp()
library(tools)
startDynamicHelp()
startDynamicHelp
httpdPort()
getOption("help.ports")
foo = function(x) x
y=foo(1)
w = print(1)
w
c(1,2,c(3,4))
y = list(a=1,b=2,c=3)
typeof(y)
is.vector(y)
x = c(a=1,b=2,c=3)
x$a
y = list(1,"a",TRUE, 3L,c(1,3),list(3,4));y
y[1]
y[[1]]
typeof(y[1])
typeof(y[[1]])
typeof(y[5])
y[[5]]
df = data.frame(a=1,b="foo")
is.list(df)
is.matrix(df)
typeof(airquality)
is.data.frame(quality)
is.data.frame(airquality)
s = read.table("http://www.ats.ucl.edu/stat/examples/angell.txt")
df <- data.frame(a=c(1,2,3),b=c("a","b","c"),stringsAsFactors = F)
str(df)
df <- data.frame(a=c(1,2,3),b=c("a","b","c"))
str(df)
View(airquality)
d = c(3,7,9,10,16,20,25,57,30)
var(d)
View(anscombe)
d = [3,7,9,10,16,20,25,57,30]
d = c(3,7,9,10,16,20,25,57,30)
var(d)
var(1:10)
myvar=function(v){sum((v-mean(v))^2)/(length(v) -1)}
myvar(1:10)
sd(d)
sqrt(273.5)
View(tree.oj)
3+4
library("bayesplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(bayesplot)
x < -5
x <-5
5
c(1,2,3)
x=5
x[1]
typeof(5)
mode(5)
typeof(c(1,2,3))
mode(c(1,2,3))
typeof(1L)
View(airquality)
airquality$Ozone
library(help='datasets')
head(airquality$Temp)
rm(list = ls())
c(1,2,3,4) + C(1,2)
c(1,2,3,4) + c(1,2)
c(1,2,3,4,5) + c(1,2)
c(1,2,3,4,5) + c(1,2) ->x
x
c(1,2,3,4,5.7) + c(1,2) ->x
x
c(1,2,3,4,5.7) + c(1,2) ->x;x
list(1,2,3,4)
list(1,2,3,4) -> y
y[[3]]
y[3]
y[[3]] ->x
y[3] -> z
x + 1
z + 1
str(5)
str(c(1,2))
file.choose()
fn = "/Users/schoem/Downloads/tyre.csv"
df = read.csv("/Users/schoem/Downloads/tyre.csv")
str(df)
m = lm(Mileage~Brands,data = df)
summary(m)
plot(m)
summary.aov(m)
#http://www.win-vector.com/blog/2017/05/on-indexing-operators-and-composition/
d <- data.frame(x= c('d', 'a', 'b', 'c'),origRow= 1:4,
stringsAsFactors= FALSE)
r = rank(d$x)
d
r
o
o = orderd$x
o
o = order(d$x)
o
ord = order(d$x)
d$x[ord]
d2 <- d[ord, ]
d2
d2$rankX <- 1:nrow(d2)
d2
d3 <- d2[order(d2$origRow), ]
d3
d4 <- d2 # scratch frame to ready for indexed assignment
d4
d4[ord, ] <- d2 # invert by assignment
print(d4)
default.stringsAsFactors()
getwd()
setwd("~/Courses/Programming-2017/Lectures/Data Preprocessing")
boxplot(Species~Sepla.Width)
boxplot(Sepla.Width~Species,data=iris)
boxplot(Sepal.Width~Species,data=iris)
boxplot(iris)
df = iris[,1:4]
View(df)
hist(df[1])
hist(df[,1])
head(airquality)
X = airquality[,1:4]
summary(X)
any(is.na(X$Wind))
any(is.na(X$Temp))
sum(is.na(X$Ozone))
View(X)
X$Ozone
ave(X$Ozone,function(x) mean(x,na.rm=true))
ave(X$Ozone,function(x) {mean(x,na.rm=true)})
ave(X$Ozone,function(x) {mean(X$Ozone,na.rm=true)})
is.vector(X$Ozone)
ave(X$Ozone,function(x) {mean(X$Ozone,na.rm=TRUE)})
ave(X$Ozone,FUN=function(x) {mean(X$Ozone,na.rm=TRUE)})
X$Ozone = ifelse(is.na(X$Ozone),
sapply(X$Ozone,function(z) mean(X$Ozone,na.rm=TRUE)),
X$Ozone)
mtcars
View(mtcars)
dim(mtcars)
mtcars[1,1]
rownames(mtcars)
str(iris$Species)
str(mtcars)
f =factor(mtcars$carb)
f
unique(mtcars$carb)
unique(mtcars$gear)
levels(f)
order(f)
table(mtcars$carb)
f
as.integer(f)
g = factor(mtcars$gear)
g
as.integer(g)
labels(g)
levels(g)
boxplot(mtcars$mpg~mtcars$gear)
summary(mtcars)
mt = mtcars
mt$gear = g
summary(mt)
boxplot(mtcars$mpg~mtcars$gear)
getwd()
View(df)
View(d)
View(d2)
health = read.csv("health.csv")
health = read.csv("health.csv")
str(health)
summary(mtcars$gear)
summary(mtcars$gear)
summary(mt$gear)
A = read.delim("Arthritis.txt",sep=" ",stringsAsFactors = FALSE)
View(A)
str(A)
unique(A$Improved)
unique(A$Treatment)
x = 1:100
y = x*0 +100
getwd()
rownames(mtcars)
mt = mtcars
mt["Make"] = rownames(mtcars)
head(mt)
mt$Make = factor(mt$Make,levels = unique(mt$Make),labels = 1:length(mt$Make))
str(mt)
View(mt)
m = sapply(rownames(mt),function(n) strsplit(n))
m = sapply(rownames(mt),function(n) strsplit(n," "))
unique(m)
m = sapply(rownames(mt),function(n) strsplit(n," ")[1])
View(m)
strsplit("Mazda RX4"," ")
strsplit("Mazda RX4"," ")[1]
strsplit("Mazda RX4"," ")[[1]]
length(strsplit("Mazda RX4"," "))
class(strsplit("Mazda RX4"," "))
class(strsplit("Mazda RX4"," "))[[1]][1]
x = strsplit("Mazda RX4"," ")
View(x)
y = x[[1]]
length(y)
y[1]
strsplit("Mazda RX4"," "))[[1]][1]
strsplit("Mazda RX4"," ")[[1]][1]
mt$Make = sapply(rownames(mtcars), function(n) strsplit(n)[[1]][1])
mt$Make = sapply(rownames(mtcars), function(n) strsplit(n," ")[[1]][1])
View(mt)
write.csv("mtcars.csv",mt)
write.csv(mt,"mtcars.csv")
s = scale(iris[,1:4])
View(s)
library(caTools)
set.seed(123)
split = sample.split(iris$Species, SplitRatio = 0.8)
ss = iris[split,]
View(ss)
View(ss)
sss = subset(iris,split==TRUE)
View(ss)
View(ss)
sss = subset(iris,split)
View(sss)
testss = subset[-split]
testss = subset(-split)
testss = subset(iris,-split)
testss = subset(iris,!split)
View(testss)
rows(iris)
library(devtools)
library("desc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:desc", unload=TRUE)
detach("package:devtools", unload=TRUE)
